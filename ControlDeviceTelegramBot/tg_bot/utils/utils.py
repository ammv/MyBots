import json

path = r'data\devices.json'

def add_device(device, ip):
    with open(path, encoding='utf-8') as f:
        try:
            devices = json.load(f)
            devices[device] = (ip, 'üí§', None)
        except Exception as e:
            devices = {device: (ip, 'üí§', None)}
        
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(devices, f, ensure_ascii=False)
        
def update_all_status(status=0):
    emoji = ('üí§', '‚úÖ', '‚ùå')[status]
    with open(path, encoding='utf-8') as f:
        try:
            devices = json.load(f)
            for device, data in devices.items():
                devices[device] = (data[0], emoji, data[2])
                
        except:
            devices = dict()
            
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(devices,f, ensure_ascii=False)
        
def update_status(device, status=1, find_by_user=False, set_user=False):
    emoji = ('üí§', '‚úÖ', '‚ùå')[status]
    user = False if status in (0,1) else set_user
    
    with open(path, encoding='utf-8') as f:
        devices = json.load(f)
        
        if find_by_user:
            for _device in devices:
                if user in devices[_device]:
                    devices[_device] = (devices[_device][0], emoji, user)
                    break
                    
        else:
            devices[device] = (devices[device][0], emoji, user)
        
    with open(path, 'w', encoding='utf-8') as f:
        
        json.dump(devices, f, ensure_ascii=False)
        
def get_device_ip(device):
    with open(path, encoding='utf-8') as f:
        try:
            ip = json.load(f)[device][0]
        except:
            return 'None'
        
    return ip
    
def get_ip_devices():
    with open(path, encoding='utf-8') as f:
        try:
            devices = json.load(f)
            ip_devices = {value[0]: key for key, value in devices.items()}
        except:
            ip_devices = dict()
        
    return ip_devices
        
def get_devices(ip=False, keys=False):
    with open(path, encoding='utf-8') as f:
        try:
            if ip:
                devices = [i[0] for i in json.load(f).values()]
            else:
                if keys:
                    devices = list(json.load(f))
                else:
                    devices = [key + ' ' + value[1] for key, value in json.load(f).items()]
        except Exception as e:
            devices = []
        
    return devices + ['–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è']
    
def get_device(device, _id=False):
    with open(path, encoding='utf-8') as f:
        devices = json.load(f)
        if _id:
            for _device in devices:
                if _id in devices[_device]:
                    return devices[_device]
                    
        else: 
            return devices[device]
    
def check_device_ip(deviceip):
    if ':' in deviceip:
        deviceip = deviceip.split(':')
        if len(deviceip) == 2 and deviceip[0] != '':
            deviceip = deviceip[1].split('.')
            if len(deviceip) == 4:
                for i in deviceip:
                    if i == '':
                        return '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 255 –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä'
                    if 0 > int(i) or int(i) > 255:
                        return f'–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 255. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä'
                return True
            return '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 255 –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä'
        return '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –£ –≤–∞—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏—à–Ω–µ–µ ":" –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä'
    return '–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ":". –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä'